model RBAC

class OP
end

class OBJ
end

class PSU
end

class P < PSU
end

class R
attributes
  name : String
end

class S < PSU
end

class U < PSU
attributes
  name : String
end

association UA between
  U[*]
  R[*]
end

association PA between
  P[*]
  R[*]
end

association SU between
  S[*]
  U[1]
end

association OBP between
  P[*]
  OBJ[*]
  OP[*]
end

class CR
end

association CRR between
  R[*]
  CR[0..1]
end

class CP
end

association CPR between
  P[*]
  CP[0..1]
end

class CU
end

association CUR between
  U[*]
  CU[0..1]
end

class RBAC

attributes
  OBJ : Set(OBJ) init = OBJ.allInstances
  OP : Set(OP) init = OP.allInstances
  P : Set(P) init = P.allInstances
  R : Set(R) init = R.allInstances
  S : Set(S) init = S.allInstances
  U : Set(U) init = U.allInstances
  CP : Set(Set(P)) init = CP.allInstances->collectNested(p)->asSet()
  CR : Set(Set(R)) init = CR.allInstances->collectNested(r)->asSet()
  CU : Set(Set(U)) init = CU.allInstances->collectNested(u)->asSet()

operations
  roles(us : Set(PSU)): Set(R) = us->collect(u | if
    u.oclIsKindOf(S) then user(u.oclAsType(S)).r else
    if u.oclIsKindOf(P) then u.oclAsType(P).r else
    u.oclAsType(U).r endif endif)->asSet
  user(s : S): U = s.u
  users(rs : Set(R)): Set(U) = rs->collect(u)->asSet()
  sessions(us : Set(U)): Set(S) = us->collect(s)->asSet()
  permissions(rs : Set(R)): Set(P) = rs->collect(p)->asSet()
  ops(rs : Set(R), os : Set(OBJ)): Set(OP) =
    permissions(rs)->reject(p | (p.oBJ-os)->isEmpty())->collect(oP)->asSet()
  object(ps : Set(P)): Set(OBJ) = ps->collect(oBJ)->asSet()
end

constraints
context RBAC
