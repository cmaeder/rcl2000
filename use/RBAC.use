model RBAC

class OP
end

class OBJ
end

class PSU
end

class P < PSU
attributes
  op : OP
  obj : OBJ
end

class R
attributes
  name : String
operations
  getRoles() : Set(R) = Set{self}
end

class HR < R
operations
  getRoles() : Set(R) = Set{self}->union(juniors()) // overwrite
  juniors() : Set(HR) = junior->closure(junior)->asSet
  seniors() : Set(HR) = senior->closure(senior)->asSet
constraints
  inv nonCyclicRoleHierarchy: juniors()->excludes(self)
end

association RH between
  HR[*] role junior
  HR[*] role senior
end

class S < PSU
attributes
  user : U
  activeRoles : Set(R)
constraints
inv onlyActiveAssignedRoles:
  user.r->includesAll(activeRoles)
end

class U < PSU
attributes
  name : String
end

association UA between
  U[*]
  R[*]
end

association PA between
  P[*]
  R[*]
end

class CP
attributes
 cs : Set(P)
end

class CR
attributes
 cs : Set(R)
end

class CU
attributes
 cs : Set(U)
end

class RBAC

attributes
  OBJ : Set(OBJ) init = OBJ.allInstances
  OP : Set(OP) init = OP.allInstances
  P : Set(P) init = P.allInstances
  R : Set(R) init = R.allInstances
  S : Set(S) init = S.allInstances
  U : Set(U) init = U.allInstances
  CP : Set(Set(P)) init = CP.allInstances->collectNested(cs)->asSet
  CR : Set(Set(R)) init = CR.allInstances->collectNested(cs)->asSet
  CU : Set(Set(U)) init = CU.allInstances->collectNested(cs)->asSet

operations
  roles(us : Set(PSU)): Set(R) = us->collect(u | if
    u.oclIsKindOf(S) then u.oclAsType(S).activeRoles else
    if u.oclIsKindOf(P) then u.oclAsType(P).r else
    u.oclAsType(U).r endif endif)->asSet
  roles_(us : Set(PSU)): Set(R) = roles(us)->collect(getRoles())->asSet
  user(s : S): U = s.user
  users(rs : Set(R)): Set(U) = rs->collect(u)->asSet
  sessions(us : Set(U)): Set(S) = S->select(s | us->includes(s.user))
  permissions(rs : Set(R)): Set(P) = rs->collect(p)->asSet
  permissions_(rs : Set(R)): Set(P) =
    permissions(rs->collect(getRoles())->asSet)
  ops(rs : Set(R), os : Set(OBJ)): Set(OP) =
    permissions(rs)->select(p | os->includes(p.obj))->collect(op)->asSet
  objects(ps : Set(P)): Set(OBJ) = ps->collect(obj)->asSet
end

constraints
context RBAC
