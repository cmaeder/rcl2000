model RBAC

class OP
end

class OBJ
end

class P
attributes
  op : OP
  obj : OBJ
end

class R
operations
  getRoles() : Set(R) = Set{self}
end

class HR < R
operations
  getRoles() : Set(HR) = juniors()->including(self)
  juniors() : Set(HR) = junior->closure(junior)->asSet
  seniors() : Set(HR) = senior->closure(senior)->asSet
constraints
  inv nonCyclicRoleHierarchy: juniors()->excludes(self)
end

association RH between
  HR[*] role senior
  HR[*] role junior
end

class S
attributes
  user : U
constraints
inv onlyActiveAssignedRoles:
  user.r.getRoles()->includesAll(activeRoles)
end

class U
end

association UA between
  U[*]
  R[*]
end

association PA between
  P[*]
  R[*]
end

aggregation SessionRoles between
  S[*]
  R[*] role activeRoles
end

abstract class Builtin
operations
  OBJ() : Set(OBJ) = OBJ.allInstances
  OP() : Set(OP) = OP.allInstances
  P() : Set(P) = P.allInstances
  R() : Set(R) = R.allInstances
  S() : Set(S) = S.allInstances
  U() : Set(U) = U.allInstances
  juns(rs : Set(R)): Set(R) = rs->select(oclIsKindOf(HR))
    ->collect(oclAsType(HR).junior)->asSet
  sens(rs : Set(R)): Set(R) = rs->select(oclIsKindOf(HR))
    ->collect(oclAsType(HR).senior)->asSet
  juns_(rs : Set(R)): Set(R) = rs->union(rs->select(oclIsKindOf(HR))
    ->collect(oclAsType(HR).juniors()))->asSet
  sens_(rs : Set(R)): Set(R) = rs->union(rs->select(oclIsKindOf(HR))
    ->collect(oclAsType(HR).seniors()))->asSet
  uroles(us : Set(U)): Set(R) = us->collect(r)->asSet
  proles(ps : Set(P)): Set(R) = ps->collect(r)->asSet
  sroles(ss : Set(S)): Set(R) = ss->collect(activeRoles)->asSet
  uroles_(us : Set(U)): Set(R) = juns_(uroles(us))
  proles_(ps : Set(P)): Set(R) = sens_(proles(ps))
  sroles_(ss : Set(S)): Set(R) = juns_(sroles(ss))
  user(s : S): U = s.user
  users(rs : Set(R)): Set(U) = rs->collect(u)->asSet
  users_(rs : Set(R)): Set(U) = users(sens_(rs))
  sessions(us : Set(U)): Set(S) = S()->select(s | us->includes(s.user))
  rpermissions(rs : Set(R)): Set(P) = rs->collect(p)->asSet
  rpermissions_(rs : Set(R)): Set(P) = rpermissions(juns_(rs))
  upermissions(us : Set(U)): Set(P) = rpermissions(uroles(us))
  upermissions_(us : Set(U)): Set(P) = rpermissions_(uroles(us))
  spermissions(ss : Set(S)): Set(P) = rpermissions(sroles(ss))
  spermissions_(ss : Set(S)): Set(P) = rpermissions_(sroles(ss))
  pops(ps : Set(P), os : Set(OBJ)): Set(OP) =
    ps -> select(p | os->includes(p.obj))->collect(op)->asSet
  rops(rs : Set(R), os : Set(OBJ)): Set(OP) = pops(rpermissions(rs), os)
  rops_(rs : Set(R), os : Set(OBJ)): Set(OP) = rops(juns_(rs), os)
  uops(us : Set(U), os : Set(OBJ)): Set(OP) = rops(uroles(us), os)
  uops_(us : Set(U), os : Set(OBJ)): Set(OP) = rops_(uroles(us), os)
  objects(ps : Set(P)): Set(OBJ) = ps->collect(obj)->asSet
constraints
  inv singleton: Builtin.allInstances->size = 1
end
